/**
  * Protocol between cores (peers).
  * Version : 1
  * All string are encoded in UTF-8.
  */

import "common.proto";

package Network;

/***** Multicast UDP messages. *****/
// Have chunks ?
// This message is sent periodically to all other peers.
// It send an array of hashe chunks. These hases can come
// from different files.
// This message is also used to know the other peers.
// a -> all
message HaveChunks {
   required uint32 version = 1; // The version of the protocol used.
   required string nick = 2;
   required uint64 amount = 3; // [byte] Amount of sharing.
   repeated Common.Hash chunks = 4; // Can be empty.
}
// This message is only sent if some chunks are requested.
// Return an array with a bool value for each
// given chunks. 'true' means "I have this chunk".
// all -> a
message HaveChunksResult {
   repeated bool chunkStates = 2; // The array size must have the same size of HaveChunks.chunks.
}

// a -> all
message ChatMessage {
   required string message = 2;
}

// Searching a file or a directory.
// See http://dev.euphorik.ch/wiki/pmp/Algorithms#Searching for more details.
// a -> all
message Find {
   required string pattern = 1;
}
// all -> a
// The size of this message must fit in a UDP packet so it must not exeed 65'507 bytes.
// Number of average entry in a result (we don't take in account the overhead of protobuff) :
//  n = 65507 / (level + averagePathFilenameSize + Size + averageHashNb * 20)
//  n = 65507 / (4 + 100 + 8 + 20 * 20) = 127 entries.
// Many of message can be sent by a peer for a given search. The core will only accept answers
// for a limited duration. For example 10 seconds.
// see Common.FindResult


/***** Unicast TCP Messages. *****/
// Get hashes.
// If a peer want to start a queued download but doesn't know its hashes
// it will ask the hashes to the source peer.
// If 'b' doesn't have the hashes but have the file
// the hashes will be computed on the fly. Thus this request
// can be a bit long (~20s).
// a -> b
message GetHashes {
   required Common.Entry file = 1;
}
// b -> a
message GetHashesResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have the requested entry.
      ERROR_UNKNOWN = 255;
   }
   required Status status = 1;
   repeated Common.Hash chunks = 2;
}

// Download.
// a -> b
message GetChunk {
   required Common.Hash chunk = 1;
   required uint32 offset = 2; // [byte] Relative to the beginning of the chunk.
}
// b -> a
message GetChunkResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have this chunk.
      ALREADY_DOWNLOADING = 2; // If 'a' is already downloading a chunk from 'b'.
      ERROR_UNKNOWN = 255;
   }
   required Status status = 1;
}
// b -> a : stream of data..

// Browsing.
// a -> b
message GetEntries {
   required Common.Entry directory = 1;
}
// b -> a
message GetEntriesResult {
   repeated Common.DirEntry dirs = 1;
   repeated Common.FileEntry files = 2;
}
