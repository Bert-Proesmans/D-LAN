/**
  * Protocol between core and GUI.
  * When a command is sent to the core, one or more responds will be sent back,
  * there cannot be other message like 'event message' between theses messages.
  * Version : 1
  * All string are encoded in UTF-8.
  */

import "common.proto";

package Protos.GUI;

// Generic message sent by the core after a command.
message ReturnStatus {
   required uint32 error_code = 1; // 0 means no error.
   repeated string error_param = 2;
}

message Settings {
   optional Common.Settings settings = 1;
   repeated string shared_directory = 2;
   repeated string destination_directory = 3;
}

/***** Core state *****/
// Core -> GUI
// The state is sent periodically to the GUI (each second for example)
// or right after a GUI command.
// The size of this message should be lesser than 63kB to fit in one IP packet.
// id : 0x01
message State {
   message Peer {
      required Common.Hash peer_id = 1;
      required string nick = 2;
      required uint64 sharing_amount = 3;
   }
   message Download {
      enum Status {
         COMPLETE = 0;
         NO_SOURCE = 1;
         NOT_FOUND = 2;
         UNKNOWN_PEER = 3;
         INITIALIZING = 4;
         QUEUED = 5;
      }
      required uint32 id = 1;
      required Common.Entry file = 2;
      required Status status = 3;
      required uint32 progress = 4; // 0 to 100
      repeated uint32 peer_id = 5;
   }
   message Upload {
      //required uint32 id = 1;
      required Common.Entry file = 1;
      required uint32 current_part = 2;
      required uint32 nb_part = 3;
      required uint32 progress = 4; // 0 to 100
      required Common.Hash peer_id = 5;
   }
   message Stats {
      enum CacheStatus {
         SCANNING_IN_PROGRESS = 0; // 1st pass : grab all file/dir names and their size and index it.
         HASHING_IN_PROGRESS = 1;
         UP_TO_DATE = 2;
      }
      required CacheStatus cache_status = 1;
      required uint32 progress = 2; // 0 to 100
      
      required uint32 download_rate = 3; // [byte/s].
      required uint32 upload_rate = 4; // [byte/s].
      required uint64 sharing_amount = 5; // [byte].
   }
   
   repeated Peer peer = 1;
   
   repeated Download download = 2;
   repeated Upload upload = 3;
   
   optional Settings settings = 4;
   optional Stats stats = 5;
}


/***** Events *****/
// Core -> GUI
// id : 0x11
message EventChatMessage {
   required uint32 time = 1;
   required string message = 2;
}

// Core -> GUI
// id : 0x12
message EventLogMessage {
   required uint32 time = 1;
   required string message = 2;
   
   // These fields are use only in debug mode.
   optional string component = 3;
   optional string severity_level = 4;
}

// Core -> GUI
// Sended when the user close the core
// and when the connection is local.
// id : 0x13
message Close {
}

/***** Commands. *****/
// Set the settings
// GUI -> Core
// id : 0x21
// Message 'Settings'

// Core -> GUI
// id : 0x22
// Message 'ReturnStatus'

// GUI -> Core
// id : 0x31
message Search  {
   required uint64 tag = 1;
   required string pattern = 2;
}
// Core -> GUI
// id : 0x32
// Message 'ReturnStatus'
// Core -> GUI
// This message is sent for each UDP datagram received.
// id : 0x33
message SearchResult {
   required uint64 tag = 1;
   required Common.FindResult result = 2; // Encapsulate the received result.
}

// GUI -> Core
// id : 0x41
message Browse {
   required Common.Hash peer_id = 1;
   required Common.Entry dir = 2;
}
// Core -> GUI
// id : 0x42
// Message 'ReturnStatus'
// Core -> GUI
// id : 0x43
message BrowseResult {
   repeated Common.Entry entry = 1;
}

// GUI -> Core
// id : 0x51
// Remove all completed downloads from the queue.
message ClearCompleteDownloads {
}
// Core -> GUI
// id : 0x52
// Message 'ReturnStatus'

// GUI -> Core
// Remove a download from the queue. If this download
// is not finished its chunks will be removed.
// id : 0x61
message CancelDownloads {
   repeated uint32 id = 1;
}
// Core -> GUI
// id : 0x62
// Message 'ReturnStatus'

// GUI -> Core
// Says to the core to download a file or a directory.
// id : 0x71
message Download {
   required Common.Hash peer_id = 1; // From where the file/dir is.
   required Common.Entry entry = 2;
}
// Core -> GUI
// id : 0x72
// Message 'ReturnStatus'

// GUI -> Core
// Send a chat message to everyone.
// id : 0x81
message ChatMessage {
   required string message = 1;
}
// Core -> GUI
// id : 0x82
// Message 'ReturnStatus'
