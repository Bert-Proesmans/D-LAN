/**
  * Protocol between core and GUI.
  * Version : 1
  * All string are encoded in UTF-8.
  */

import "common.proto";

package Protos.GUI;

/***** GUI Common messages *****/
message Settings {     
   optional string nick = 1;
   optional Common.DirEntry sharedDir = 2; // A dir size can be unknown (=0).
   optional Common.DirEntry destinationDir = 3; // A dir size can be unknown (=0).
}


/***** Core state *****/
// Core -> GUI
// The state is sent periodically to the GUI (each second for example)
// or right after a GUI command.
// The size of this message should be lesser than 63kB to fit in one IP packet.
message State {
   message Peer {
      required uint32 peerID = 1;
      required string nick = 2;
      required uint64 sharingAmount = 3;
   }
   message Download {
      enum Status {
         COMPLETE = 0;
         NO_SOURCE = 1;
         NOT_FOUND = 2;
         UNKNOWN_PEER = 3;
         INITIALIZING = 4;
         QUEUED = 5;
      }
      required uint32 ID = 1;
      required Common.Entry file = 2;
      required Status status = 3;
      required uint32 progress = 4; // 0 to 100
      repeated uint32 peerIDs = 5;
   }
   message Upload {
      required uint32 ID = 1;
      required Common.Entry file = 2;
      required uint32 currentPart = 3;
      required uint32 nbPart = 4;
      required uint32 progress = 5; // 0 to 100
      required uint32 peerID = 6;
   }
   message Stats {
      enum HashingStatus {
         INITIALIZING = 0; // 1st pass : grab all file/dir names and their size.
         HASHING_IN_PROGRESS = 1;
         COMPLETE = 2;
         REFRESHING = 3; // followed by status 1 if there is some files to hash
      }
      required HashingStatus hashingStatus = 1;
      required uint32 progress = 2; // 0 to 100
      required uint32 downloadRate = 3; // [byte/s].
      required uint32 uploadRate = 4; // [byte/s].
      required uint64 sharingAmount = 5; // [byte].
   }
   
   repeated Peer peers = 1;
   
   repeated Download downloads = 2;
   repeated Upload uploads = 3;
   
   optional Settings settings = 4;
   optional Stats stats = 5;
}


/***** Events *****/
// Core -> GUI
message EventChatMessage {
   required uint32 time = 1;
   required string message = 2;
}

// Core -> GUI
message EventLogMessage {
   required uint32 time = 1;
   required string message = 2;
   
   // These fields are use only in debug mode.
   optional string component = 3;
   optional string severityLevel = 4;
}

// Core -> GUI
// Sended when the user close the core
// and when the connection is local.
message Close {
}

/***** Commands. *****/
// GUI -> Core
message SetSettings {
   required Settings settings = 1;
}

// GUI -> Core
message Search  {
   required uint32 tag = 1;
   required string pattern = 2;
}
// Core -> GUI
// This message is sent for each UDP datagram received.
message SearchResult {
   required uint32 tag = 1;
   required uint32 peerID = 2; // ID of the peer.
   required Common.FindResult result = 3; // Encapsulate the received result.
}

// GUI -> Core
message Browse {
   required uint32 peerID = 1;
   required Common.DirEntry dirEntry = 2;
}
// Core -> GUI
message BrowseResult {
   repeated Common.DirEntry dirs = 1;
   repeated Common.FileEntry files = 2;   
}

// GUI -> Core
// Remove all completed downloads from the queue.
message ClearCompleteDownloads {
}

// GUI -> Core
// Remove a download from the queue. If this download
// is not finished its chunks will be removed.
message CancelDownloads {
   repeated uint32 ID = 1;
}

// GUI -> Core
// Says to the core to download a file OR a directory (XOR).
message Download {
   required uint32 peerID = 1; // From where the file/dir is.
   optional Common.DirEntry dir = 2;
   optional Common.FileEntry file = 3;
}

// GUI -> Core
// Send a chat message to everyone.
message ChatMessage {
   required string message = 1;
}
