/**
  * All the core settings.
  */
  
import "common.proto";

package Protos.Core;

message Settings {
   optional string nick = 1;
   optional Common.Hash peer_id = 2;
   
   optional uint32 chunk_size = 3 [default = 67108864]; // (64 MiB).
   optional uint32 buffer_size = 4 [default = 65536]; // (64 KiB). Buffer used when streaming files.
   optional uint32 socket_buffer_size = 5 [default = 65536]; // (64 KiB). Max size of the socket buffer, using when receiving or sending data over the sockets.
   optional uint32 socket_timeout = 6 [default = 5000]; // [ms].
      
   // FileManager.
   optional uint32 minimum_duration_when_hashing = 7 [default = 3000]; // [ms].
   optional uint32 scan_period_unwatchable_dirs = 8 [default = 30000]; // [ms].
   optional string unfinished_suffix_term = 9 [default = ".unfinished"];
   optional uint32 minimum_free_space = 10 [default = 1048576]; // (1 MiB) After creating a file in a directory this is the minimum space it must be left.
   optional uint32 save_cache_period = 11 [default = 60000]; // [ms]. (1 min).
   
   // PeerManager.
   optional uint32 pending_socket_timeout = 12 [default = 10000]; // [ms]. When a new connection is created we wait a maximum of this period before data incoming.
   optional uint32 peer_timeout_factor = 13 [default = 2]; // [ms]. (20 s). If we don't receive any 'IMAlive' message from a peer during peer_timeout_factor * peer_imalive_period the peer is considering as dead.
   optional uint32 idle_socket_timeout = 14 [default = 60000]; // [ms], (1 min). Idle connections can exist for this duration.
   optional uint32 max_number_idle_socket = 15 [default = 6]; // The maximum number of idle socket per distant peer. (one for each TCP message : 'GetEntries',  'GetHashes', 'GetChunk').
   optional uint32 get_hashes_timeout = 16 [default = 30000]; // [ms] (30 s). After sending the message 'GetHashes' we will receive a stream of hashes, if the time between two hashes exceed this value, the request is aborted.
   
   // DownloadManager.
   optional uint32 number_of_downloader = 17 [default = 3]; // Maximum number of simultaneous download.
   optional uint32 lan_speed = 18 [default = 52428800]; // [B/s]. (50 MiB/s).
   optional double time_recheck_chunk_factor = 19 [default = 4];
   optional double switch_to_another_peer_factor = 20 [default = 1.5];
   optional uint32 download_rate_valid_time_factor = 21 [default = 15000];
   optional uint32 save_queue_period = 23 [default = 60000]; // [ms]. (1 min).
   
   // UploadManager.
   optional uint32 upload_live_time = 24 [default = 5000]; // [ms].
   
   // NetworkListener.
   optional uint32 peer_imalive_period = 22 [default = 10000]; // [ms]. Send an IMAlive message each 10 s.
   optional uint32 unicast_base_port = 25 [default = 59487]; // If it's already taken we will look further to a free port. (UDP + TCP).
   optional uint32 multicast_port = 26 [default = 59486]; // (UDP)
   optional uint32 multicast_group = 27 [default = 3960285976]; // 236.123.43.24
   optional uint32 multicast_ttl = 28 [default = 3];
   optional uint32 max_udp_datagram_size = 29 [default = 8164]; // (~8 KiB). It doesn't include the IP+UDP header (28 bits).
   optional uint32 udp_read_buffer_size = 38 [default = 81640]; // (10 * 8KiB).
   optional uint32 number_of_hashes_sent_imalive = 30 [default = 128];
   optional uint32 max_number_of_search_result_to_send = 32 [default = 300];
   
   // RemoteControlManager
   optional uint32 remote_control_port = 33 [default = 59485];
   optional Common.Hash remote_password = 34; // Only used for non-local connection.
   optional uint32 remote_refresh_rate = 35 [default = 1000]; // [ms].
   optional uint32 remote_max_nb_connection = 36 [default = 5];
   optional uint32 search_lifetime = 37 [default = 5000]; // [ms]. (5s)
}