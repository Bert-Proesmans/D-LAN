/**
  * Some common messages.
  * Version : 1
  * All string are encoded in UTF-8.
  */

package Protos.Common;

message Error {
   optional string message = 1;
}

// For identify a chunk or a user.
message Hash {
   optional bytes hash = 1; // 20 bytes. If it doesn't exist the hash is null.
}

// A shared directory matches an existing handle, thus there is no need to have the complete path to it.
message SharedDir {
   required Hash id = 1; // Identify a shared directory.
   optional string shared_name = 2; // An optional name to identify the shared directory by human. It may correspond to the name of the shared directory itself.   
}

// Used for a directory or a file.
message Entry {
   enum Type {
      FILE = 0;
      DIR = 1;
   }
   required Type type = 1;
   required string path = 2; // Relative path from the sharing directory. For example : "/Videos/My cat/". A root directory has a one slash : "/".
   required string name = 3; // Directory name or file name. For example : "MyLOLCat.avi". A root directory has an undetermined name.
   required uint64 size = 4; // [bytes].
   optional SharedDir shared_dir = 5; // The shared directory of the entry.
   repeated Hash chunk = 6; // Only for a file. No chunk means that the peer doesn't know the hashes.
}

// A result following a search.
// See 'Network.Find' and 'GUI.GUINetwork' for more information.
message FindResult {
   message EntryLevel {
      required uint32 level = 1;
      required Entry entry = 2;
   }
   required uint64 tag = 1;
   required Common.Hash peer_id = 2;
   repeated EntryLevel entry = 3;
}

// Core settings.
message Settings {
   optional string nick = 1;
   optional Common.Hash peerID = 2;
   
   optional uint32 buffer_size = 4 [default = 65536]; // (64KiB), Buffer used when reading/writting files.
   
   // DownloadManager.
   optional uint32 number_of_downloader = 3 [default = 3];
   
   // FileManager.
   optional uint32 minimum_duration_when_hashing = 5 [default = 1000]; // [ms]
   optional uint32 time_between_rescan = 6 [default = 30000]; // [ms]. Only for unwatchable directories.
   optional string unfinished_suffix_term = 7 [default = ".unfinished"];
   optional uint32 minimum_free_space = 8 [default = 1048576]; // (1 MiB) After creating a file in a directory this is the minimum space it must be left.
   
   // PeerManager.
   optional uint32 pending_socket_timeout = 9 [default = 10000]; // [ms]. When a new connection is created we wait a maximum of this period before data incoming.
   optional uint32 socket_buffer_size = 10 [default = 8388608]; // 8 MiB
   optional uint32 peer_timeout = 11 [default = 20000]; // [ms]. (20 s). If we don't receive any 'IMAlive' message from a peer during this duration the peer is considering as dead.
   optional uint32 idle_socket_timeout = 12 [default = 1200000]; // [ms], (20 min). Idle connections can exist for this duration.
   optional uint32 max_number_idle_socket = 13 [default = 1]; // The maximum number of idle socket per distant peer.
}
