P : l'ensemble des peers
[a, b, c] : les peers du réseau
p : le peer courant

h2. Messages

message HashChunk {
   uint32 numero;
   bytes hash; // 120 Bytes
}


h2. J'existe !

Envois régulièrement des messages de présence (par intervale de 10s) :

p -> P (Multicast UDP)
message ImAlive {
   string name;
   uint32 sharing_size;
}


h2. Recherche de fichiers / dossiers

p -> P :
message Search {
   string glob_pattern;
}
P -> p :
message SearchReply {
   message Result {
      string Path;
      uint32 size;
      // Only if all hash chunks are known
      optional repeated HashChunk; 
   }
   repeated Result result;
}


h2. Téléchargement


p -> a :
message getHashChunks {
   string Path;
}
a -> p :
message HashChunks {
   repeated HashChunk hashChunks;
}

// All the peers are always sorted by bandwith quality.
// Il ne peut pas y avoir plus de un download depuis un peer donné.
p -> a :
message DownloadChunk {
   HashChunk hashChunk;
}
a -> p :
message DownloadChunkReply {
   enum Status {
      OK = 0;
      UNFOUNDED = 1;
  }
   Status status;
}



h2. Browsing

h2. Chat
